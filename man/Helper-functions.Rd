% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bs_checkboxes.R, R/bs_entry.R,
%   R/bs_listbox.R, R/bs_radiobuttons.R, R/bs_text.R, R/bs_tk_buttonset.R,
%   R/bs_widget_modify_names.R, R/deprecated__bs_check_boxes.R,
%   R/deprecated__bs_tk_textbox.R, R/deprecated__radiobuttons_horizintal.R,
%   R/generic_functions.R, R/helper-functions.R, R/set_biostat_mode.R,
%   R/tcltk__bs_combobox.R, R/tcltk__ok_cancel_help__macro.R,
%   R/tcltk__variableListBox2.R, R/tcltk_commands.R
\name{get_values.bs_checkboxes}
\alias{get_values.bs_checkboxes}
\alias{set_values.bs_checkboxes}
\alias{bs_entry}
\alias{set_values.bs_entry}
\alias{values<-.bs_entry}
\alias{tclvalue<-.bs_entry}
\alias{get_values.bs_entry}
\alias{bs_listbox}
\alias{get_values_listbox}
\alias{set_values_listbox}
\alias{get_selection_ind_listbox}
\alias{get_selection_listbox}
\alias{set_selection_listbox}
\alias{get_size.listbox}
\alias{get_size.tkwin}
\alias{get_selection.listbox}
\alias{get_selection_length.listbox}
\alias{set_selection.listbox}
\alias{add_selection.listbox}
\alias{get_values.listbox}
\alias{set_values.listbox}
\alias{set_values.listbox_with_filter}
\alias{set_yview.listbox}
\alias{tk_see.listbox}
\alias{tk_disable.listbox}
\alias{tk_normalize.listbox}
\alias{tk_get_state.listbox}
\alias{get_values.bs_radiobuttons}
\alias{set_values.bs_radiobuttons}
\alias{bs_text}
\alias{tk_activate.bs_tk_buttonset}
\alias{tk_normalize.bs_tk_buttonset}
\alias{tk_disable.bs_tk_buttonset}
\alias{tk_get_state.bs_tk_buttonset}
\alias{tk_widget_modify_names}
\alias{bs_check_boxes}
\alias{bs_tk_textbox}
\alias{set_values.bs_tk_textbox}
\alias{values<-.bs_tk_textbox}
\alias{tclvalue<-.bs_tk_textbox}
\alias{get_values.bs_tk_textbox}
\alias{radioButtons_horizontal}
\alias{get_size}
\alias{get_values}
\alias{set_values}
\alias{get_selection}
\alias{get_selection_length}
\alias{set_selection}
\alias{add_selection}
\alias{set_xview}
\alias{set_yview}
\alias{tk_see}
\alias{print.bs_tk_widget}
\alias{Helper-functions}
\alias{get_active_ds}
\alias{list_objects_of_class}
\alias{variables_with_unique_values}
\alias{var_pos_n}
\alias{list_summaries_Models}
\alias{str_glue_eval}
\alias{eval_text}
\alias{style_cmd}
\alias{try_command}
\alias{is_try_error}
\alias{function_not_implemented}
\alias{gettext_ezr}
\alias{gettext_bs}
\alias{s2u}
\alias{u2s}
\alias{spaces}
\alias{logger_error}
\alias{tk_label_blue}
\alias{swap}
\alias{swap_rows}
\alias{correct_row_index}
\alias{clean_str}
\alias{get_obj_names}
\alias{unique_obj_names}
\alias{unique_df_name}
\alias{unique_file_name}
\alias{unique_colnames}
\alias{unique_colnames_2}
\alias{safe_names}
\alias{path_truncate}
\alias{show_error_messages}
\alias{is_not_valid_name}
\alias{is_empty_name}
\alias{is_not_empty_name}
\alias{variable_is_not_selected}
\alias{object_is_not_selected}
\alias{are_not_valid_names}
\alias{forbid_to_replace_variable}
\alias{forbid_to_replace_variables}
\alias{forbid_to_replace_object}
\alias{forbid_to_replace_file}
\alias{show_code_evaluation_error_message}
\alias{dataset_not_persent}
\alias{active_dataset_not_persent}
\alias{nonFactorsP}
\alias{class_ggplot_P}
\alias{list_objects_ggplot}
\alias{objects_in_env_P}
\alias{variables_with_unique_values_P}
\alias{command_rcmdr_restart}
\alias{command_rcmdr_close}
\alias{command_rcmdr_close_r}
\alias{is_console_output}
\alias{command_rcmdr_use_1_window}
\alias{command_rcmdr_use_3_windows}
\alias{command_rcmdr_set_output_mode}
\alias{is_biostat_mode}
\alias{use_relative_path}
\alias{use_absolute_path}
\alias{get_use_relative_path}
\alias{set_biostat_mode}
\alias{get_values_combobox}
\alias{set_values_combobox}
\alias{get_selection_ind_combobox}
\alias{get_selection_combobox}
\alias{get_size.combobox}
\alias{get_size.tk2combobox}
\alias{get_selection.combobox}
\alias{set_selection.combobox}
\alias{get_values.combobox}
\alias{set_values.combobox}
\alias{tk_activate.combobox}
\alias{tk_normalize.combobox}
\alias{tk_read_only.combobox}
\alias{tk_disable.combobox}
\alias{tk_get_state.combobox}
\alias{ok_cancel_help}
\alias{variableListBox2}
\alias{cursor_set_busy}
\alias{cursor_set_idle}
\alias{tk_get_state.default}
\alias{tk_yview.default}
\alias{tk_xview.default}
\alias{tclvalue_lgl}
\alias{tclvalue_int}
\alias{tclvalue_int_split}
\alias{tclvalue_chr}
\alias{tclvalue_chr_split}
\title{Helper functions for RcmdrPlugin.biostat.}
\usage{
\method{get_values}{bs_checkboxes}(obj, ..., simplify = TRUE,
  rm_names = simplify)

\method{set_values}{bs_checkboxes}(obj, values, ...)

bs_entry(parent = top, width = "28", value = "", label = "",
  label_position = c("left", "above", "right", "none"),
  label_color = getRcmdr("title.color"), padx = 0, pady = 0,
  sticky = "w", sticky_label = sticky, sticky_text = sticky,
  main_frame = tk2frame(parent), text_frame = tk2frame(main_frame),
  label_frame = tk2frame(main_frame), tip = "", label_tip = "",
  scroll_x = FALSE, on_click = do_nothing,
  on_double_click = do_nothing, on_triple_click = do_nothing,
  on_release = do_nothing, on_click_3 = do_nothing,
  on_double_click_3 = do_nothing, on_triple_click_3 = do_nothing,
  on_release_3 = do_nothing, on_key_release = do_nothing,
  use_context_menu = TRUE, bind_clear = TRUE, ...)

\method{set_values}{bs_entry}(obj, values, ..., add = FALSE)

\method{values}{bs_entry}(x) <- value

\method{tclvalue}{bs_entry}(x) <- value

\method{get_values}{bs_entry}(obj, ...)

bs_listbox(parent, values = variables_all(), value = NULL,
  selection = NULL, selectmode = c("single", "extended", "browse",
  "multiple"), title = NULL, subtitle = NULL, tip = "",
  height = getRcmdr("variable.list.height"),
  width = getRcmdr("variable.list.width"), enabled = TRUE,
  scroll = c("both", "x", "y", "none"), autoscroll = c("x", "y",
  "both", "none"), use_filter = FALSE, filter_label = "Filter",
  sticky = "nw", on_select = do_nothing, on_click = do_nothing,
  on_double_click = do_nothing, on_triple_click = do_nothing,
  on_release = do_nothing, on_click_3 = do_nothing,
  on_double_click_3 = do_nothing, on_triple_click_3 = do_nothing,
  on_release_3 = do_nothing, on_keyboard = c("select", "scroll",
  "ignore"), on_keyboard_fun = do_nothing, title_sticky = "w",
  subtitle_sticky = title_sticky, ...)

get_values_listbox(listbox)

set_values_listbox(listbox, values, clear = TRUE)

get_selection_ind_listbox(listbox)

get_selection_listbox(listbox)

set_selection_listbox(listbox, sel, clear = TRUE)

\method{get_size}{listbox}(obj, ...)

\method{get_size}{tkwin}(obj, ...)

\method{get_selection}{listbox}(obj, ...)

\method{get_selection_length}{listbox}(obj, ...)

\method{set_selection}{listbox}(obj, sel, clear = TRUE, ...)

\method{add_selection}{listbox}(obj, sel, ...)

\method{get_values}{listbox}(obj, vals, ...)

\method{set_values}{listbox}(obj, values, ..., clear = TRUE)

\method{set_values}{listbox_with_filter}(obj, values, ..., clear = TRUE)

\method{set_yview}{listbox}(obj, ind, ...)

\method{tk_see}{listbox}(obj, ind, ...)

\method{tk_disable}{listbox}(obj, ..., background = "grey95")

\method{tk_normalize}{listbox}(obj, ..., background = "white")

\method{tk_get_state}{listbox}(obj, ...)

\method{get_values}{bs_radiobuttons}(obj, ...)

\method{set_values}{bs_radiobuttons}(obj, values, ...)

bs_text(parent, ..., label = "", undo = TRUE)

\method{tk_activate}{bs_tk_buttonset}(obj, ..., .which = NULL)

\method{tk_normalize}{bs_tk_buttonset}(obj, ..., .which = NULL)

\method{tk_disable}{bs_tk_buttonset}(obj, ..., .which = NULL)

\method{tk_get_state}{bs_tk_buttonset}(obj, ..., .out = "list")

tk_widget_modify_names(parent = top,
  init_val_radiobuttons = c("overwrite", "modify"),
  init_val_checkbox = "0", init_val_prefix = "",
  init_val_suffix = "", width = 37, cmd_radiobuttons = function() {
  }, cmd_checkbox = function() { })

bs_check_boxes(window = top, frame = stop("frame not supplied"),
  boxes = stop("boxes not supplied"), initialValues = NULL,
  labels = stop("labels not supplied"), title = NULL, ttk = FALSE,
  commands = list())

bs_tk_textbox(parent = top, width = "28", value = "", label = "",
  label_position = c("left", "above", "right", "none"),
  label_color = getRcmdr("title.color"), padx = 0, pady = 0,
  sticky = "w", main_frame = tkframe(parent),
  text_frame = tkframe(main_frame), label_frame = tkframe(main_frame),
  tip = "", on_click = function() { }, on_double_click = function() {
  }, on_triple_click = function() { }, on_release = function() { },
  on_click_3 = function() { }, on_double_click_3 = function() { },
  on_triple_click_3 = function() { }, on_release_3 = function() { },
  ...)

\method{set_values}{bs_tk_textbox}(obj, values, ..., add = FALSE)

\method{values}{bs_tk_textbox}(x) <- value

\method{tclvalue}{bs_tk_textbox}(x) <- value

\method{get_values}{bs_tk_textbox}(obj, ...)

radioButtons_horizontal(window = top, name = stop("name not supplied"),
  buttons = stop("buttons not supplied"), values = NULL,
  initialValue = ..values[1], labels = stop("labels not supplied"),
  title = NULL, title.color = NULL, right.buttons = FALSE,
  command = function() { }, sticky_title = "w", sticky_buttons = "e")

get_size(obj, ...)

get_values(obj, ...)

set_values(obj, values, ...)

get_selection(obj, ...)

get_selection_length(obj, ...)

set_selection(obj, sel, ...)

add_selection(obj, sel, ...)

set_xview(obj, ...)

set_yview(obj, ind, ...)

tk_see(obj, ind, ...)

\method{print}{bs_tk_widget}(x, ...)

get_active_ds()

list_objects_of_class(class = NULL, all.names = TRUE,
  envir = parent.frame())

variables_with_unique_values()

var_pos_n(variables, type = c("all", "numeric", "num", "factor",
  "fct_like", "factor_strict", "fct", "twoLevelFactor", "fct_like_2_lvls",
  "nonfactor", "non_fct", "character", "chr", "logical", "lgl"),
  vars = NULL)

list_summaries_Models(envir = .GlobalEnv, ...)

str_glue_eval(..., envir = parent.frame(), .sep = "", .open = "{",
  .close = "}", envir_eval = envir, envir_glue = envir)

eval_text(x, envir = parent.frame(), ...)

style_cmd(command, indent_by = 2, ...)

try_command(x)

is_try_error(obj)

function_not_implemented()

gettext_ezr(...)

gettext_bs(...)

s2u(str)

u2s(str)

spaces(n, symbol = " ")

logger_error(command = NULL, error_msg = NULL)

tk_label_blue(...)

swap(x, i, j)

swap_rows(x, i, j)

correct_row_index(i, n_max)

clean_str(str, transliterations = "Latin-ASCII", ...)

get_obj_names(include_class = NULL, exclude_class = NULL,
  include2_class = NULL, all.names = TRUE, envir = globalenv())

unique_obj_names(names, prefix = "", suffix = "",
  list_of_choices = objects(all.names = TRUE, envir = .GlobalEnv),
  all_numbered = FALSE)

unique_df_name(names = active_dataset_0(), prefix = "", suffix = "",
  list_of_choices = objects(all.names = TRUE, envir = .GlobalEnv),
  all_numbered = FALSE)

unique_file_name(name = "file", dir = getwd(),
  list_of_choices = dir(dir, all.files = TRUE), all_numbered = FALSE)

unique_colnames(names = "", prefix = "", suffix = "",
  list_of_choices = listVariables(), all_numbered = FALSE)

unique_colnames_2(names = "", prefix = "", suffix = "",
  list_of_choices = listVariables(), all_numbered = TRUE)

safe_names(str)

path_truncate(path, max_length = 30)

show_error_messages(message, popup_msg = message, title = "Error",
  parent = CommanderWindow())

is_not_valid_name(name, parent = CommanderWindow())

is_empty_name(name, which_name = "name", parent = CommanderWindow())

is_not_empty_name(name, which_name = "name",
  parent = CommanderWindow(), article = "a")

variable_is_not_selected(obj, obj_type = "variable",
  parent = CommanderWindow(), article = "a")

object_is_not_selected(obj, obj_type = "object",
  parent = CommanderWindow(), article = "an")

are_not_valid_names(name, parent = CommanderWindow())

forbid_to_replace_variable(name, parent = CommanderWindow())

forbid_to_replace_variables(name, parent = CommanderWindow())

forbid_to_replace_object(name, envir = .GlobalEnv,
  parent = CommanderWindow())

forbid_to_replace_file(name, parent = CommanderWindow())

show_code_evaluation_error_message(parent = CommanderWindow(),
  add_msg = "", add_note = "")

dataset_not_persent(parent = CommanderWindow())

active_dataset_not_persent(parent = CommanderWindow())

nonFactorsP(n = 1)

class_ggplot_P(n = 1)

list_objects_ggplot(envir = .GlobalEnv)

objects_in_env_P(n = 1, envir = .GlobalEnv, ...)

variables_with_unique_values_P(n = 1)

command_rcmdr_restart()

command_rcmdr_close()

command_rcmdr_close_r()

is_console_output()

command_rcmdr_use_1_window()

command_rcmdr_use_3_windows()

command_rcmdr_set_output_mode(console.output = NULL)

is_biostat_mode()

use_relative_path()

use_absolute_path()

get_use_relative_path()

set_biostat_mode()

get_values_combobox(combobox)

set_values_combobox(combobox, values, ...)

get_selection_ind_combobox(combobox)

get_selection_combobox(combobox)

\method{get_size}{combobox}(obj, ...)

\method{get_size}{tk2combobox}(obj, ...)

\method{get_selection}{combobox}(obj, ...)

\method{set_selection}{combobox}(obj, sel, ...)

\method{get_values}{combobox}(obj, ...)

\method{set_values}{combobox}(obj, values, ...)

\method{tk_activate}{combobox}(obj, ...)

\method{tk_normalize}{combobox}(obj, ...)

\method{tk_read_only}{combobox}(obj, ...)

\method{tk_disable}{combobox}(obj, ...)

\method{tk_get_state}{combobox}(obj, ...)

ok_cancel_help(window = top, helpSubject = NULL, model = FALSE,
  reset = NULL, apply = NULL, helpPackage = NULL, on_help = NULL,
  close_on_ok = FALSE, reset_location = FALSE, sticky = "w",
  ok_label = "OK", apply_label = "Apply", reset_label = "Reset",
  after_apply_fun = do_nothing, after_apply_success_fun = do_nothing,
  before_cancel_fun = do_nothing)

variableListBox2(parentWindow, variableList = Variables(),
  bg = "white", selectmode = "single", export = "FALSE",
  initialSelection = NULL,
  listHeight = getRcmdr("variable.list.height"),
  listWidth = getRcmdr("variable.list.width"), onClick_fun = function()
  { }, onDoubleClick_fun = function() { },
  onTripleClick_fun = function() { }, onRelease_fun = function() { },
  onClick3_fun = function() { }, onDoubleClick3_fun = function() { },
  onTripleClick3_fun = function() { }, onRelease3_fun = function() { },
  title)

cursor_set_busy(frame = NULL)

cursor_set_idle(frame = NULL)

\method{tk_get_state}{default}(obj, ...)

tk_yview.default(obj, ind, ...)

tk_xview.default(obj, ind, ...)

tclvalue_lgl(x)

tclvalue_int(x)

tclvalue_int_split(x)

tclvalue_chr(x, trim = TRUE, ...)

tclvalue_chr_split(x)
}
\arguments{
\item{...}{other arguments}

\item{frame}{Tcl/Tk frame object.}

\item{str}{sring}
}
\description{
Helper functions for package \pkg{RcmdrPlugin.biostat}.
}
\keyword{internal}
